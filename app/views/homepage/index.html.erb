<div class="jumbotron">
  <div class="call-to-action">
    <h1>Endgame</h1>
    <h1>Chess</h1>
    <p>“Openings teach you openings.</p>
    <p>Endgames teach you chess!”</p>
    <p><em>Stephan Gerzadowicz, Chess Master</em></p>
    <br />
    <%= link_to 'Sign Up and Play for Free', new_user_registration_path, class: "btn btn-primary sign" %> 
    <p>or</p> 
    <%= link_to 'Sign In', new_user_session_path, class: "sign" %>
  </div>
</div>

<div class="head-description">
  <p>Endgame Chess is our version of the capstone project for <a href="www.thefirehoseproject">The Firehose Project</a>, an intensive 15 week programming bootcamp. We are Team Endgame, 5 junior developers with different backgrounds working remotely to build the best chess app we can.  With the support of our mentor, Travis Johnston, we followed Agile Methodology with weekly stand-ups to plan our sprints, kept our code in check using Git, and made sure everything worked with an extensive test suite. Some highlights include:</p>
  <ul class="highlights"> 
    <li><strong>Check and Mate Detection</strong> <span class="view-source" id="check-source">(view source)</span></li>
    <div id="check-panel">
      <pre><code class="language-ruby">
        # Check Detection
        def check(users_id, opponent_id)
          opponent_pieces = pieces.where(user_id: opponent_id, captured: false)
          king = pieces.find_by(user_id: users_id, type: "King")
          opponent_pieces.each do |piece|
            return true if piece.valid_move?(king.row_position, king.col_position)
          end
          false
        end

        # Checkmate Detection
        def checkmate(id)
          current_pieces = pieces.where(user_id: id, captured: false)
          status = true
          current_pieces.each do |piece|
            8.times do |row|
              8.times do |col|
                next unless piece.reload.valid_move?(row, col)
                status = false unless checkmate_check(piece, row, col)
              end
            end
          end
          status
        end

        # Transaction for Checkmate Detection
        def checkmate_check(piece, row, col)
          status = true
          Piece.transaction do
            piece.move_to!(row, col)
            status = false unless determine_check
            fail ActiveRecord::Rollback
          end
          status
        end
      </code></pre>
    </div>
      <ul>
        <li>State is important in chess.  To determine the state of the game, we loop through each of your opponent’s pieces each turn and test them against your King.  If one of those pieces has a valid move, the game is in Check. Check is never the result of user error (except for in strategy) -- you can’t purposely move into Check.</li>
        <li>You’ll want to get out of Check as soon as possible, since Checkmate means game over.  In order to determine Checkmate, we loop through each of your pieces and see whether they can a) avoid b) block or c) capture the opponent piece that has your King in check. These checks are run in database transaction to ensure that none of the movements the game tries are saved (inadvertently helping you out).</li>
      </ul>
    <li><strong>Drag and Drop Movement</strong> <span class="view-source" id="drag-drop">(view source)</span></li>
    <div id="drag-panel">
      <pre><code class="language-javascript">
        // Drag and drop using jQuery draggable and droppable
        $('.move_mode').draggable({ containment: '.board'});
        $( '.piece' ).droppable({
          drop: function( event, ui ) {
            $(ui.draggable).detach().css({top: 0,left: 0});
            $(this).replaceWith(ui.draggable);
            var draggableId = ui.draggable.attr("id");
            var droppableId = $(this).attr("pos");
            var updateUrl = "/pieces/" + draggableId
            var row = droppableId[0];
            var col = droppableId[1];

            // Update piece via AJAX  
            $.ajax({
              type: 'PUT',
              url: updateUrl,
              dataType: 'json',
              data: { piece: { 
                      row_position: row, 
                      col_position: col 
              }},
              complete: function(){
                location.reload(true);
              }
            });
          }     
        });

        // Pusher for Real-Time Connection
        var pusher = new Pusher(ENV['pusher_key'], {
            encrypted: true
        });  

        var gameId = $('.pusherInfo').data('pusherinfo');

        var channel = pusher.subscribe(gameId);

        channel.bind('update-piece', function(data) {
          location.reload(true);
        });
      </code></pre>
    </div>
      <ul>
        <li>Through the magic of jQuery, pieces are simply picked up and put down where you want them to go.  An AJAX request handles updating the database and a Websockets connection with Pusher handles refreshing the page for both you and your opponent.  Not too shabby.</li>
      </ul>
  </ul>
</div>

<div> 
   <h1>Open Source, Standards Driven, Full Service</h1>
</div>

<hr class="divider-style" /> 

<div>
  <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
    <div class="panel panel-default">
      <div class="panel-heading" role="tab" id="headingOne">
        <h2 class="panel-title">
          <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
            Open Source <span class="glyphicon glyphicon-menu-down pull-right" aria-hidden="true"></span>
          </a>
        </h4>
      </div>
      <div id="collapseOne" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
        <div class="panel-body">
          <p>Endgame Chess is a proud member open source community. You can view all of our code on <a href="https://github.com/teamendgame/endgame-chess">GitHub</a>. Additionally, Endgame Chess is built using open source tools.</p>
          <div class="flex-container">
            <div class="flex-child">
              <%= image_tag("ruby.png", size: "50x50") %>
              <h2>Ruby</h2>
              <p>All of our business logic is written in Ruby</p>
            </div>

            <div class="flex-child">
              <%= image_tag("rails.png", size: "39x50") %>
              <h2>Rails</h2>
              <p>Rails is the foundation of Endgame Chess, bringing so many useful tools and conventions to make building it from scratch fast</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading" role="tab" id="headingTwo">
        <h2 class="panel-title">
          <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
            Standards Driven <span class="glyphicon glyphicon-menu-down pull-right" aria-hidden="true"></span>
          </a>
        </h4>
      </div>
      <div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
        <div class="panel-body">
          <p>Our team followed standard Agile and SCRUM methodologies, having a weekly virtual stand up to plan the week's sprints. We developed a solid test suite using Test Driven Design and used Rubocop to enforce best-practices in code style.</p>
          <div class="flex-container">
            <div class="flex-child">
              <%= image_tag("trello.png", size: "50x50") %>
              <h2>Trello</h2>
              <p>We used Trello as an Agile board to keep track of the progress of all of our tickets</p>
            </div>

            <div class="flex-child">
              <%= image_tag("slack.png", size: "50x50") %>
              <h2>Slack</h2>
              <p>Slack kept our team in constant communication</p>
            </div>

            <div class="flex-child">
              <%= image_tag("rubocop.png", size: "50x50") %>
              <h2>Rubocop</h2>
              <p>Rubocop analyzed our code for style and best-practices</p>
            </div>

            <div class="flex-child">
              <%= image_tag("screenhero.png", size: "57x50") %>
              <h2>Screenhero</h2>
              <p>Screenhero made it easy to pair program remotely</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading" role="tab" id="headingThree">
        <h2 class="panel-title">
          <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
            Full Service <span class="glyphicon glyphicon-menu-down pull-right" aria-hidden="true"></span>
          </a>
        </h4>
      </div>
      <div id="collapseThree" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
        <div class="panel-body">
          <p>We were dedicated to finding the right tool for the job.  Each of these services are best-in-class, allowing us to focus on developing Endgame Chess.</p>  
          <div class="flex-container">
            <div class="flex-child">
              <%= image_tag("heroku.png", size: "50x53") %>
              <h2>Heroku</h2>
              <p>Heroku's Cloud Application Platform hosts the production version of Endgame Chess</p>
            </div>

            <div class="flex-child">
              <%= image_tag("octocat.jpg", size: "60x50") %>
              <h2>GitHub</h2>
              <p>GitHub was used extensively to display new work with pull requests, allow for comments during code review, and track issues as they came up</p>
            </div>

            <div class="flex-child">
              <%= image_tag("travis.jpg", size: "50x50") %>
              <h2>Travis CI</h2>
              <p>Travis CI runs our Continuous Integration and our Continuous Deployment</p>
            </div>

            <div class="flex-child">
              <%= image_tag("pusher.png", size: "36x50") %>
              <h2>Pusher</h2>
              <p>Pusher uses Websockets to allow us to have real-time updates for pieces for both players</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<hr class="divider-style" /> 

<div>
  <h1>The Team</h1>
  <div class="flex-container">
    <div class="flex-child text-center">
       <%= image_tag("adam.jpg", size: "100x100", class: "team") %>
      <p>Adam D (<a href="https://github.com/addstar34">@addstar34</a>)</p>
    </div>

    <div class="flex-child text-center">
      <%= image_tag("aziz.jpg", size: "100x100", class: "team") %>
      <p>Aziz Sharipov (<a href="https://github.com/gagaception">@gagaception</a>)</p>
    </div>

    <div class="flex-child text-center">
      <%= image_tag("jonathan.jpg", size: "100x100", class: "team") %>
      <p>Jonathan Pike (<a href="https://github.com/jonathanpike">@jonathanpike</a>)</p>
    </div>

    <div class="flex-child text-center">
      <%= image_tag("ronny.jpg", size: "100x100", class: "team") %>
      <p>Ronny Almog (<a href="https://github.com/ronny2205">@ronny2205</a>)</p>
    </div>

    <div class="flex-child text-center">
      <%= image_tag("take.jpg", size: "100x100", class: "team") %>
      <p>Takehiro Mouri (<a href="https://github.com/takehiromouri">@takehiromouri</a>)</p>
    </div>
  </div>
</div>